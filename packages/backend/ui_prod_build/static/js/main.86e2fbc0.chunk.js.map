{"version":3,"sources":["index.js"],"names":["cache","InMemoryCache","link","createHttpLink","uri","client","ApolloClient","App","arr","namesArr","useState","sortBy","setSortBy","GET_ALL_NAMES","gql","useQuery","loading","error","data","diffProp","sortedData","allNames","slice","sort","a","b","name","localeCompare","amount","className","href","onClick","map","n","idx","length","reduce","acc","cur","ReactDOM","render","document","getElementById"],"mappings":"kVAQA,IAAMA,EAAQ,IAAIC,gBACZC,EAAOC,yBAAe,CAC1BC,IAAK,aAEDC,EAAS,IAAIC,eAAa,CAAEN,QAAOE,SAEnCK,EAAM,WAAO,IAoBEC,EASCC,EA7BJ,EACcC,mBAAS,UADvB,mBACRC,EADQ,KACAC,EADA,KAGVC,EAAgBC,cAAH,KAHH,EAYiBC,mBAASF,GAAlCG,EAZQ,EAYRA,QAASC,EAZD,EAYCA,MAAOC,EAZR,EAYQA,KAsBlBC,EAAsB,WAAXR,EAAsB,OAAS,SAG1CS,EAAaF,IAjBAV,EAiBkBU,EAAKG,SAASC,QAhBpC,SAgB6CX,EAhB9BH,EAAIe,MAC9B,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,SAEvBlB,EAAIe,MACd,SAACC,EAAGC,GAAJ,OAAUA,EAAEG,OAASJ,EAAEI,WAc3B,OACE,sBAAKC,UAAU,gBAAf,UACE,0CACA,8DAEY,mBAAGC,KAAK,oCAAR,oBAFZ,OAICd,GAAW,2CACXC,GAAS,uCACTG,GACC,sBAAKS,UAAU,WAAf,UACE,wBAAQE,QAAS,kBAAMnB,EAAUO,IAAjC,2BACcA,KAEd,6BAEIC,EAAWY,KAAI,SAACC,EAAGC,GAAJ,OACb,uCACMD,EAAEP,KADR,qBACyBO,EAAEL,OAD3B,MAASM,QAMf,oDAEqBd,EAAWe,OAFhC,6CAjCY1B,EAoCqBW,EAnChCX,EAAS2B,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIV,SAAQ,IAgCjD,cAYVW,IAASC,OACP,cAAC,iBAAD,CAAgBnC,OAAQA,EAAxB,SACE,cAACE,EAAD,MACiBkC,SAASC,eAAe,U","file":"static/js/main.86e2fbc0.chunk.js","sourcesContent":["import \"./index.scss\";\r\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { gql } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst link = createHttpLink({\r\n  uri: \"/graphql\"\r\n});\r\nconst client = new ApolloClient({ cache, link });\r\n\r\nconst App = () => {\r\n  const [ sortBy, setSortBy ] = useState(\"amount\");\r\n\r\n  const GET_ALL_NAMES = gql`\r\n    query GetAllNames {\r\n      allNames {\r\n        name\r\n        amount\r\n      }\r\n    }\r\n  `;\r\n\r\n  const { loading, error, data } = useQuery(GET_ALL_NAMES);\r\n\r\n  /**\r\n   * Sort an array of Name objects by amount or alphabetically.\r\n   * @param { Array<{ name: String, amount: number }> } arr array to sort\r\n   * @param { \"name\" | \"amount\" } prop property to sort by\r\n   * @returns { Array<{ name: String, amount: number }> } sorted array\r\n   */\r\n  const sortArrBy = (arr, prop) => {\r\n    if (prop === \"name\") return arr.sort(\r\n      (a, b) => a.name.localeCompare(b.name)\r\n    );\r\n    else return arr.sort(\r\n      (a, b) => b.amount - a.amount\r\n    );\r\n  };\r\n  \r\n  const countNames = (namesArr) => {\r\n    return namesArr.reduce((acc, cur) => acc + cur.amount, 0);\r\n  };\r\n\r\n  // the prop that is not currently set as sorting criteria\r\n  const diffProp = sortBy === \"amount\" ? \"name\" : \"amount\";\r\n\r\n  // .slice() to make a modifiable copy\r\n  const sortedData = data && sortArrBy(data.allNames.slice(), sortBy);\r\n  \r\n  return (\r\n    <div className=\"centered dark\">\r\n      <h2>nappmono</h2>\r\n      <p>\r\n        Name App Monorepo.\r\n        Source on <a href=\"https://github.com/jalho/nappmono\">GitHub</a>.\r\n      </p>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error!</p>}\r\n      {sortedData &&\r\n        <div className=\"centered\">\r\n          <button onClick={() => setSortBy(diffProp)}>\r\n            {`Sort by ${diffProp}`}\r\n          </button>\r\n          <ol>\r\n            {\r\n              sortedData.map((n, idx) => (\r\n                <li key={idx}>\r\n                  {`${n.name}, amount: ${n.amount}.`}\r\n                </li>\r\n              ))\r\n            }\r\n          </ol>\r\n          <p>\r\n            {\r\n              `Unique names: ${sortedData.length}.\r\n              Names in total: ${countNames(sortedData)}.`\r\n            }\r\n          </p>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}