{"version":3,"sources":["components/NameList.js","components/NameSearch.js","components/Top.js","index.js"],"names":["NameList","props","arr","namesArr","sortBy","setSortBy","listVisible","setListVisible","loading","error","data","diffProp","sortedData","allNames","slice","sort","a","b","name","localeCompare","amount","className","onClick","map","n","idx","length","reduce","acc","cur","GET_SINGLE_AMOUNT","gql","NameSearch","useState","setName","useLazyQuery","getAmount","amountQuery","useEffect","variables","value","onChange","e","target","Top","href","cache","InMemoryCache","link","createHttpLink","uri","client","ApolloClient","GET_ALL_NAMES","App","useQuery","ReactDOM","render","document","getElementById"],"mappings":"mLAqBMA,EAAW,SAACC,GAAW,IAbVC,EASCC,EAMhBC,EAOEH,EAPFG,OACAC,EAMEJ,EANFI,UACAC,EAKEL,EALFK,YACAC,EAIEN,EAJFM,eACAC,EAGEP,EAHFO,QACAC,EAEER,EAFFQ,MACAC,EACET,EADFS,KAGIC,EAAsB,WAAXP,EAAsB,OAAS,SAE1CQ,EAAaF,IA1BFR,EA0BoBQ,EAAKG,SAASC,QAzBtC,SAyB+CV,EAzBhCF,EAAIa,MAC9B,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,SAEvBhB,EAAIa,MACd,SAACC,EAAGC,GAAJ,OAAUA,EAAEG,OAASJ,EAAEI,WAuBzB,OACE,gCACGZ,GAAW,2CACXC,GAAS,uCACTG,GACC,gCACE,sBAAKS,UAAU,aAAf,UACE,wBAAQC,QAAS,kBAAMjB,EAAUM,IAAjC,2BACcA,KAEd,wBAAQW,QAAS,kBAAMf,GAAgBD,IAAvC,+BAIF,6BAEIM,EAAWW,KAAI,SAACC,EAAGC,GAAJ,OACb,uCACMD,EAAEN,KADR,qBACyBM,EAAEJ,OAD3B,MAASK,QAMf,oDAEqBb,EAAWc,OAFhC,6CA1CUvB,EA6CuBS,EA5ClCT,EAASwB,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIT,SAAQ,IAyC/C,c,wICxDV,IAAMU,EAAoBC,cAAH,KAMjBC,EAAa,SAAC,GAA2C,IAAzC1B,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,eAAgBG,EAAW,EAAXA,KAAW,EAClCuB,mBAAS,SADyB,mBACpDf,EADoD,KAC9CgB,EAD8C,OAE3BC,uBAAaL,GAFc,mBAErDM,EAFqD,KAE1CC,EAF0C,KAQ5D,OAJAC,qBAAU,WACRF,EAAU,CAAEG,UAAW,CAAErB,YACxB,CAACkB,EAAWlB,IAGb,gCACE,wBAAQI,QAAS,kBAAMf,GAAgBD,IAAvC,qBAGCI,GAAQ,oDAEP,wBAAQ8B,MAAOtB,EAAMuB,SAAU,SAAAC,GAAC,OAAIR,EAAQQ,EAAEC,OAAOH,QAArD,SACG9B,EAAKG,SAASU,KAAI,SAACC,EAAGC,GAAJ,OACjB,wBAAQe,MAAOhB,EAAEN,KAAjB,SAAkCM,EAAEN,MAARO,WAIjCY,EAAY7B,SAAW,aACvB6B,EAAY5B,OAAS,SACrB4B,EAAY3B,MAAQ,sCACfQ,EADe,qBACEmB,EAAY3B,KAAKU,OADnB,W,iBC9BrBwB,EAAM,WACV,OACE,gCACE,0CACA,8DAEY,mBAAGC,KAAK,oCAAR,oBAFZ,W,oJCKN,IAAMC,EAAQ,IAAIC,gBACZC,EAAOC,yBAAe,CAC1BC,IAAK,aAEDC,EAAS,IAAIC,eAAa,CAAEN,QAAOE,SAEnCK,EAAgBtB,cAAH,KASbuB,EAAM,WAAO,IAAD,EACcrB,mBAAS,UADvB,mBACR7B,EADQ,KACAC,EADA,OAEwB4B,oBAAS,GAFjC,mBAER3B,EAFQ,KAEKC,EAFL,OAGiBgD,mBAASF,GAAlC7C,EAHQ,EAGRA,QAASC,EAHD,EAGCA,MAAOC,EAHR,EAGQA,KAExB,OACE,gCACE,cAAC,EAAD,IACCJ,EACC,cAAC,EAAD,CACEF,OAAQA,EACRC,UAAWA,EACXC,YAAaA,EACbC,eAAgBA,EAChBC,QAASA,EACTC,MAAOA,EACPC,KAAMA,IAER,cAAC,EAAD,CACEJ,YAAaA,EACbC,eAAgBA,EAChBG,KAAMA,QAOhB8C,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MACiBO,SAASC,eAAe,W","file":"static/js/main.d242b0d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n/**\r\n * Sort an array of Name objects by amount or alphabetically.\r\n * @param { Array<{ name: String, amount: number }> } arr array to sort\r\n * @param { \"name\" | \"amount\" } prop property to sort by\r\n * @returns { Array<{ name: String, amount: number }> } sorted array\r\n */\r\nconst sortArrBy = (arr, prop) => {\r\n  if (prop === \"name\") return arr.sort(\r\n    (a, b) => a.name.localeCompare(b.name)\r\n  );\r\n  else return arr.sort(\r\n    (a, b) => b.amount - a.amount\r\n  );\r\n};\r\n\r\nconst countNames = (namesArr) => {\r\n  return namesArr.reduce((acc, cur) => acc + cur.amount, 0);\r\n};\r\n\r\nconst NameList = (props) => {\r\n  const {\r\n    sortBy,\r\n    setSortBy,\r\n    listVisible,\r\n    setListVisible,\r\n    loading,\r\n    error,\r\n    data \r\n  } = props;\r\n  // the prop that is not currently set as sorting criteria\r\n  const diffProp = sortBy === \"amount\" ? \"name\" : \"amount\";\r\n  // .slice() to make a modifiable copy\r\n  const sortedData = data && sortArrBy(data.allNames.slice(), sortBy);\r\n\r\n  return (\r\n    <div>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error!</p>}\r\n      {sortedData &&\r\n        <div>\r\n          <div className=\"horizontal\">\r\n            <button onClick={() => setSortBy(diffProp)}>\r\n              {`Sort by ${diffProp}`}\r\n            </button>\r\n            <button onClick={() => setListVisible(!listVisible)}>\r\n              Search by name\r\n            </button>\r\n          </div>\r\n          <ol>\r\n            {\r\n              sortedData.map((n, idx) => (\r\n                <li key={idx}>\r\n                  {`${n.name}, amount: ${n.amount}.`}\r\n                </li>\r\n              ))\r\n            }\r\n          </ol>\r\n          <p>\r\n            {\r\n              `Unique names: ${sortedData.length}.\r\n              Names in total: ${countNames(sortedData)}.`\r\n            }\r\n          </p>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { NameList };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { gql, useLazyQuery } from \"@apollo/client\";\r\n\r\nconst GET_SINGLE_AMOUNT = gql`\r\n  query GetName($name: String!) {\r\n    amount(name: $name)\r\n  }\r\n`;\r\n\r\nconst NameSearch = ({ listVisible, setListVisible, data }) => {\r\n  const [ name, setName ] = useState(\"Ville\");\r\n  const [getAmount, amountQuery] = useLazyQuery(GET_SINGLE_AMOUNT);\r\n\r\n  useEffect(() => {\r\n    getAmount({ variables: { name } });\r\n  }, [getAmount, name]);\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={() => setListVisible(!listVisible)}>\r\n        Go back\r\n      </button>\r\n      {data && <label>\r\n        Search by name:\r\n        <select value={name} onChange={e => setName(e.target.value)}>\r\n          {data.allNames.map((n, idx) => (\r\n            <option value={n.name} key={idx}>{n.name}</option>\r\n          ))}\r\n        </select>\r\n      </label>}\r\n      {amountQuery.loading && \"Loading...\"}\r\n      {amountQuery.error && \"Error!\"}\r\n      {amountQuery.data && <p>\r\n        {`${name}, amount: ${amountQuery.data.amount}.`}\r\n      </p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { NameSearch };\r\n","import React from \"react\";\r\n\r\nconst Top = () => {\r\n  return (\r\n    <div>\r\n      <h2>nappmono</h2>\r\n      <p>\r\n        Name App Monorepo.\r\n        Source on <a href=\"https://github.com/jalho/nappmono\">GitHub</a>.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Top };\r\n","import \"./index.scss\";\r\nimport { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport { NameList } from \"./components/NameList\";\r\nimport { NameSearch } from \"./components/NameSearch\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Top } from \"./components/Top\";\r\nimport { gql } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst link = createHttpLink({\r\n  uri: \"/graphql\"\r\n});\r\nconst client = new ApolloClient({ cache, link });\r\n\r\nconst GET_ALL_NAMES = gql`\r\n  query GetAllNames {\r\n    allNames {\r\n      name\r\n      amount\r\n    }\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  const [ sortBy, setSortBy ] = useState(\"amount\");\r\n  const [ listVisible, setListVisible ] = useState(true);\r\n  const { loading, error, data } = useQuery(GET_ALL_NAMES);\r\n  \r\n  return (\r\n    <div>\r\n      <Top />\r\n      {listVisible ?\r\n        <NameList\r\n          sortBy={sortBy}\r\n          setSortBy={setSortBy}\r\n          listVisible={listVisible}\r\n          setListVisible={setListVisible}\r\n          loading={loading}\r\n          error={error}\r\n          data={data}\r\n        /> :\r\n        <NameSearch\r\n          listVisible={listVisible}\r\n          setListVisible={setListVisible}\r\n          data={data}\r\n        />\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}