{"version":3,"sources":["index.js"],"names":["cache","InMemoryCache","link","createHttpLink","uri","client","ApolloClient","App","namesArr","GET_ALL_NAMES","gql","useQuery","loading","error","data","sortedData","allNames","slice","sort","a","b","amount","map","n","idx","name","length","reduce","acc","cur","ReactDOM","render","document","getElementById"],"mappings":"kUAOA,IAAMA,EAAQ,IAAIC,gBACZC,EAAOC,yBAAe,CAC1BC,IAAK,aAEDC,EAAS,IAAIC,eAAa,CAAEN,QAAOE,SAEnCK,EAAM,WACV,IAgBoBC,EAhBdC,EAAgBC,cAAH,KADH,EAUiBC,mBAASF,GAAlCG,EAVQ,EAURA,QAASC,EAVD,EAUCA,MAAOC,EAVR,EAUQA,KAGlBC,EAAaD,GAAQA,EAAKE,SAASC,QAAQC,MAC/C,SAACC,EAAGC,GAAJ,OAAUA,EAAEC,OAASF,EAAEE,UAazB,OACE,gCACE,0CACCT,GAAW,2CACXC,GAAS,uCACTE,GACC,gCACE,6BAEIA,EAAWO,KAAI,SAACC,EAAGC,GAAJ,OACb,uCACMD,EAAEE,KADR,qBACyBF,EAAEF,OAD3B,MAASG,QAMf,oDAEqBT,EAAWW,OAFhC,6CA1BYlB,EA6BqBO,EA5BhCP,EAASmB,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIR,SAAQ,cAqC3DS,IAASC,OACP,cAAC,iBAAD,CAAgB1B,OAAQA,EAAxB,SACE,cAACE,EAAD,MACiByB,SAASC,eAAe,W","file":"static/js/main.d357e49e.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from \"@apollo/client\";\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { gql } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst link = createHttpLink({\r\n  uri: \"/graphql\"\r\n});\r\nconst client = new ApolloClient({ cache, link });\r\n\r\nconst App = () => {\r\n  const GET_ALL_NAMES = gql`\r\n    query GetAllNames {\r\n      allNames {\r\n        name\r\n        amount\r\n      }\r\n    }\r\n  `;\r\n\r\n  const { loading, error, data } = useQuery(GET_ALL_NAMES);\r\n  \r\n  // .slice() to make a modifiable copy\r\n  const sortedData = data && data.allNames.slice().sort(\r\n    (a, b) => b.amount - a.amount\r\n  );\r\n\r\n  const countNames = (namesArr) => {\r\n    return namesArr.reduce((acc, cur) => acc + cur.amount, 0);\r\n  };\r\n\r\n  /* TODO!\r\n    - Button: List names in alphabetical order!\r\n    - Input: Return the amount of the name given as a parameter!\r\n    - Modularize code!\r\n    - Style UI!\r\n   */\r\n  return (\r\n    <div>\r\n      <h2>nappmono</h2>\r\n      {loading && <p>Loading...</p>}\r\n      {error && <p>Error!</p>}\r\n      {sortedData &&\r\n        <div>\r\n          <ol>\r\n            {\r\n              sortedData.map((n, idx) => (\r\n                <li key={idx}>\r\n                  {`${n.name}, amount: ${n.amount}.`}\r\n                </li>\r\n              ))\r\n            }\r\n          </ol>\r\n          <p>\r\n            {\r\n              `Unique names: ${sortedData.length}.\r\n              Names in total: ${countNames(sortedData)}`\r\n            }\r\n          </p>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>, document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}